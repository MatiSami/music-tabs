{"version":3,"sources":["Components/search-result.jsx","Components/search-tool.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchResult","this","props","data","tab","display","result","className","map","artist","key","id","href","title","nameWithoutThePrefix","Component","SearchTool","state","value","url","searchResult","resultDisplay","option","error","noResults","fetch","handleChange","bind","handleChangeOption","handleSubmit","event","setState","target","preventDefault","length","then","response","json","style","width","onSubmit","placeholder","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAqCeA,E,iLAlCH,IAAD,EACgCC,KAAKC,MAApCC,EADD,EACCA,KAAMC,EADP,EACOA,IAAKC,EADZ,EACYA,QACnB,OAAe,IAFR,EACqBC,OAGxB,yBACEC,UAAW,kBAAoBF,EAAU,sBAAwB,KAEhEF,EAAKK,KAAI,SAACC,GAAD,OACR,wBAAIC,IAAKD,EAAOE,IACd,uBACEJ,UAAU,wBACVK,KACE,2DACAH,EAAOI,MACP,MACAJ,EAAOA,OAAOK,qBACd,SACAV,GAGF,2BACGK,EAAOI,MADV,MACoBJ,EAAOA,OAAOK,4BAQrC,yBAAKP,UAAW,sB,GA9BFQ,aCmHZC,E,YAjHb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,MAAO,GACPC,IAAK,mDACLC,aAAc,GACdC,eAAe,EACfC,OAAQ,GACRC,OAAO,EACPC,WAAW,EACXC,OAAO,GAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAfH,E,0EAkBNG,GACX7B,KAAK8B,SAAS,CAAEb,MAAOY,EAAME,OAAOd,U,yCAGnBY,GACjB7B,KAAK8B,SAAS,CAAET,OAAQQ,EAAME,OAAOd,U,mCAE1BY,GAAQ,IAAD,OAGlB,GAFAA,EAAMG,iBAE0B,IAA5BhC,KAAKgB,MAAMC,MAAMgB,OACnB,OAAOjC,KAAK8B,SAAS,CACnBR,OAAO,IAGTE,MAAM,oDAAD,OACiDxB,KAAKgB,MAAMC,QAE9DiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAChC,GACDA,EAAK+B,OAAS,EAChB,EAAKH,SAAS,CACZX,aAAcjB,EACdkB,eAAe,EACfE,OAAO,EACPC,WAAW,EACXC,OAAO,IAGT,EAAKM,SAAS,CACZP,WAAW,EACXH,eAAe,S,+BAWzB,OACE,yBACEd,UAAU,MACV+B,MAAOrC,KAAKgB,MAAMI,cANG,CACvBkB,MAAO,sBAKkD,MAEvD,yBAAKhC,UAAU,WACb,wBAAIA,UAAU,sBAAd,gDAGA,yBAAKA,UAAU,cACb,0BAAMiC,SAAUvC,KAAK4B,cACnB,+BACE,2BAEEY,YAAY,gDACZlC,UAAU,oBACVmC,KAAK,OACLxB,MAAOjB,KAAKgB,MAAMC,MAClByB,SAAU1C,KAAKyB,gBAGnB,2BAAOnB,UAAU,cAAcmC,KAAK,SAASxB,MAAM,aAIvD,uBACEX,UACEN,KAAKgB,MAAMM,MAAQ,oBAAsB,2BAF7C,+BAOA,uBACEhB,UACEN,KAAKgB,MAAMO,WAAavB,KAAKgB,MAAMQ,MAC/B,oBACA,2BAJR,gCASA,kBAAC,EAAD,CACEtB,KAAMF,KAAKgB,MAAMG,aACjBhB,IAAKH,KAAKgB,MAAMK,OAChBjB,QAASJ,KAAKgB,MAAMI,cACpBf,OAAQL,KAAKgB,MAAMO,kB,GA1GNT,a,MCMV6B,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.a7b34ea8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchResult extends Component {\r\n  render() {\r\n    const { data, tab, display, result } = this.props;\r\n    if (result === false) {\r\n      return (\r\n        <div\r\n          className={\"search-result \" + (display ? \"search-result_block\" : \"\")}\r\n        >\r\n          {data.map((artist) => (\r\n            <li key={artist.id}>\r\n              <a\r\n                className=\"search-result_element\"\r\n                href={\r\n                  \"http://www.songsterr.com/a/wa/bestMatchForQueryString?s=\" +\r\n                  artist.title +\r\n                  \"&a=\" +\r\n                  artist.artist.nameWithoutThePrefix +\r\n                  \"&track\" +\r\n                  tab\r\n                }\r\n              >\r\n                <p>\r\n                  {artist.title} - {artist.artist.nameWithoutThePrefix}\r\n                </p>\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className={\"search-result\"}></div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default SearchResult;\r\n","import React, { Component } from \"react\";\r\nimport SearchResult from \"./search-result\";\r\n\r\nclass SearchTool extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      url: \"http://www.songsterr.com/a/ra/songs.xml?pattern=\",\r\n      searchResult: [],\r\n      resultDisplay: false,\r\n      option: \"\",\r\n      error: false,\r\n      noResults: true,\r\n      fetch: false,\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChangeOption = this.handleChangeOption.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleChangeOption(event) {\r\n    this.setState({ option: event.target.value });\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (this.state.value.length === 0) {\r\n      return this.setState({\r\n        error: true,\r\n      });\r\n    } else {\r\n      fetch(\r\n        `http://www.songsterr.com/a/ra/songs.json?pattern=${this.state.value}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.length > 0) {\r\n            this.setState({\r\n              searchResult: data,\r\n              resultDisplay: true,\r\n              error: false,\r\n              noResults: false,\r\n              fetch: true,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              noResults: true,\r\n              resultDisplay: false,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let widthAppWithResult = {\r\n      width: \"calc(100% - 400px)\",\r\n    };\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={this.state.resultDisplay ? widthAppWithResult : null}\r\n      >\r\n        <div className=\"wrapper\">\r\n          <h1 className=\"search-tool__title\">\r\n            Znajdź akordy swoich uluionych piosenek\r\n          </h1>\r\n          <div className=\"search-box\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label>\r\n                <input\r\n                  // style={{ width: \"500px\" }}\r\n                  placeholder=\"Wpisz artystę lub tytuł piosenki...\"\r\n                  className=\"search-type__text\"\r\n                  type=\"text\"\r\n                  value={this.state.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <input className=\"search-type\" type=\"submit\" value=\"Szukaj\" />\r\n            </form>\r\n          </div>\r\n          {/* <p>{this.state.value}</p> */}\r\n          <p\r\n            className={\r\n              this.state.error ? \"search-tool_error\" : \"search-tool_error__hide\"\r\n            }\r\n          >\r\n            Musisz coś wpisać\r\n          </p>\r\n          <p\r\n            className={\r\n              this.state.noResults && this.state.fetch\r\n                ? \"search-tool_error\"\r\n                : \"search-tool_error__hide\"\r\n            }\r\n          >\r\n            Brak wyników wyszukiwania\r\n          </p>\r\n          <SearchResult\r\n            data={this.state.searchResult}\r\n            tab={this.state.option}\r\n            display={this.state.resultDisplay}\r\n            result={this.state.noResults}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchTool;\r\n","import React from \"react\";\nimport SearchTool from \"./Components/search-tool\";\n\nimport \"../src/scss/main.scss\";\n\nfunction App() {\n  return <SearchTool />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}